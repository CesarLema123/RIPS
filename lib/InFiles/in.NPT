# ALL RUNTIME,INFILE,DATAFILE TIMESTEP
# npt TEMPERATURE PRESSURE RANDOM



# -------------------- SPECIFY ANY VARIABLES WHICH MIGHT BE GIVEN FROM CMD LATER --------------------  

# -------------------- COMPUTE DIFF COEFF FOR CuNi AT A RANGE OF CONCENTRATIONS AND TEMPERATURES -------------------- 





# npt variables

variable		volumeErr equal 0.05
variable		energyErr equal 0.05
variable		aveTempErr equal "0.5*(abs(5 - 0.01*v_TEMPERATURE) + 5 + 0.01*v_TEMPERATURE)"
variable		maxTempErr equal "v_TEMPERATURE + v_aveTempErr"
variable		minTempErr equal "v_TEMPERATURE - v_aveTempErr"
variable		avePressErr equal "0.5*(abs(50 - 0.01*v_PRESSURE) + 50 + 0.01*v_PRESSURE)"
variable		maxPressErr equal "v_PRESSURE + v_avePressErr"
variable		minPressErr equal "v_PRESSURE - v_avePressErr"


# -------------------- INITIALIZING THE CONFIGURATION --------------------------
include			init.lmp


# ------------ DEFINE INTERATOMIC POTENTIAL ----------------
include			potential.lmp


thermo			100
thermo_style		custom step etotal vol temp press 
timestep		${TIMESTEP}


reset_timestep		0


# -------------------- SET UP COMPUTES AND FIX AVE/TIME -------------------- 
# AVERAGE AND STANDARD DEVIATION 
# TEMPERATURE 
variable 		TEMP equal temp
fix			aveTemp all ave/time 10 100 1000 v_TEMP mode scalar start 1000 ave one
variable		varAveTemp equal "f_aveTemp"
variable		tempSq equal "v_TEMP^2"
fix			aveTempSq all ave/time 10 100 1000 v_tempSq mode scalar start 1000 ave one
variable		tempSTD equal "sqrt(f_aveTempSq - f_aveTemp^2)"

# PRESSURE
variable		PRESS equal press
fix 			avePress all ave/time 10 100 1000 v_PRESS mode scalar start 1000 ave one
variable		varAvePress equal "f_avePress"
variable		pressSq equal "v_PRESS^2"
fix 			avePressSq all ave/time 10 100 1000 v_pressSq mode scalar start 1000 ave one
variable 		pressSTD equal "sqrt(f_avePressSq - f_avePress^2)"

# ENERGY
variable		ENERGY equal etotal
fix			aveEnergy all ave/time 10 100 1000 v_ENERGY mode scalar start 1000 ave one
variable 		varAveEnergy equal "f_aveEnergy"
variable		energySq equal "v_ENERGY^2"
fix			aveEnergySq all ave/time 10 100 1000 v_energySq mode scalar start 1000 ave one
variable		energySTD equal "sqrt(f_aveEnergySq - f_aveEnergy^2)"

# VOLUME
variable		VOLUME equal vol
fix			aveVolume all ave/time 10 100 1000 v_VOLUME mode scalar start 1000 ave one
variable 		varAveVolume equal "f_aveVolume"
variable		volumeSq equal "v_VOLUME^2"
fix			aveVolumeSq all ave/time 10 100 1000 v_volumeSq mode scalar start 1000 ave one 
variable		volumeSTD equal "sqrt(abs(f_aveVolumeSq - f_aveVolume^2))"

# ENTHALPY
variable 		ENTH equal enthalpy
fix			aveEnthalpy all ave/time 10 100 1000 v_ENTH mode scalar start 1000 ave one
variable		varAveEnthalpy equal "f_aveEnthalpy"
variable		enthalpySq equal "v_ENTH^2"
fix			aveEnthalpySq all ave/time 10 100 1000 v_enthalpySq mode scalar start 1000 ave one
variable		enthalpySTD equal "sqrt(f_aveEnthalpySq - f_aveEnthalpy^2)"


# -------------------- SET UP THERMO STYLES AND DUMPS -------------------- 

variable		dampT equal "v_TIMESTEP * v_kT"
variable 		dampP equal "v_TIMESTEP * v_kP"

variable 		kT equal 100
variable 		kP equal 10000


fix			1 all nph iso ${PRESSURE} ${PRESSURE} ${dampP} drag 1.0
fix			2 all langevin ${TEMPERATURE} ${TEMPERATURE} ${dampT} ${RANDOM} zero yes 

thermo			5000
thermo_style            custom step etotal v_varAveEnergy v_energySTD enthalpy v_varAveEnthalpy v_enthalpySTD temp v_varAveTemp v_tempSTD vol v_varAveVolume v_volumeSTD press v_varAvePress v_pressSTD



log			log.loop
dump			1 all xyz $(floor(v_RUNTIME*0.01)) dump.xyz 

variable		saveVolumeSTD equal 0.0
variable  		saveEnergySTD equal 0.0

label loop

run 			5000


# npt if statement

if "$(abs(v_saveEnergySTD - v_energySTD)) > $(energyErr * v_energySTD) || $(abs(v_saveVolumeSTD - v_volumeSTD))  > $(v_volumeErr * v_volumeSTD) || ${varAveTemp} > ${maxTempErr} || ${varAveTemp} < ${minTempErr} || ${varAvePress} > ${maxPressErr} || ${varAvePress} < ${minPressErr}" then &
	"variable saveEnergySTD equal $(v_energySTD)" "variable saveVolumeSTD equal $(v_volumeSTD)" "jump ${INFILE} loop"

# Uncomment if in NPT

unfix 			1
fix 			1 all nph iso ${PRESSURE} ${PRESSURE} ${dampP}






compute			MSD all msd com yes

thermo 			5000
thermo_style            custom step etotal v_varAveEnergy v_energySTD enthalpy v_varAveEnthalpy v_enthalpySTD temp v_varAveTemp v_tempSTD vol v_varAveVolume v_volumeSTD press v_varAvePress v_pressSTD c_MSD[4]

log			log.run
run 			${RUNTIME}

