# Varibales RUNTIME INFILE DATAFILE TIMESTEP TEMPERATURE RANDOM PXX PYY PZZ PXY PXZ PYZ

variable RUNTIME equal 100000
variable INFILE string "in.elastic"
variable DATAFILE string "data.elastic"
variable TIMESTEP equal 0.001
variable RANDOM equal 84759378
variable TEMPERATURE equal 300
variable PXX equal 0
#variable PYY equal 0
#variable PZZ equal 0
variable PXY equal 0
#variable PXZ equal 0
variable PYZ equal 10000



# -------------------- SPECIFY ANY VARIABLES WHICH MIGHT BE GIVEN FROM CMD LATER --------------------  

# -------------------- COMPUTE DIFF COEFF FOR CuNi AT A RANGE OF CONCENTRATIONS AND TEMPERATURES -------------------- 



# npt variables
# Note that all number here are chosen arbitrarily at this point
variable		volumeErr equal 0.5
variable		energyErr equal 0.5
variable		maxPressErr equal 10
variable		minPressErr equal -10
variable		aveTempErr equal "0.5*(abs(5 - 0.01*v_TEMPERATURE) + 5 + 0.01*v_TEMPERATURE)"
variable		maxTempErr equal $(v_TEMPERATURE + v_aveTempErr)
variable		minTempErr equal $(v_TEMPERATURE - v_aveTempErr)
variable		avePXXErr equal "0.5*(abs(50 - 0.01*v_PXX) + 50 + 0.01*v_PXX)"
#variable		avePYYErr equal "0.5*(abs(50 - 0.01*v_PYY) + 50 + 0.01*v_PYY)"
#variable		avePZZErr equal "0.5*(abs(50 - 0.01*v_PZZ) + 50 + 0.01*v_PZZ)"
variable		maxPXXErr equal $(v_PXX + v_avePXXErr)
variable		minPXXErr equal $(v_PXX - v_avePXXErr)
#variable		maxPYYErr equal $(v_PYY + v_avePYYErr)
#variable		minPYYErr equal $(v_PYY - v_avePYYErr)
#variable		maxPZZErr equal $(v_PZZ + v_avePZZErr)
#variable		minPZZErr equal $(v_PZZ - v_avePZZErr)
variable		aveTempErr delete
variable		avePXXErr delete
#variable		avePYYErr delete
#variable		avePZZErr delete
variable		avePXYErr equal "0.5*(abs(50 - 0.01*v_PXY) + 50 + 0.01*v_PXY)"
#variable		avePXZErr equal "0.5*(abs(50 - 0.01*v_PXZ) + 50 + 0.01*v_PXZ)"
#variable		avePYZErr equal "0.5*(abs(50 - 0.01*v_PYZ) + 50 + 0.01*v_PYZ)"
variable		maxPXYErr equal $(v_PXY + v_avePXYErr)
variable		minPXYErr equal $(v_PXY - v_avePXYErr)
#variable		maxPXZErr equal $(v_PXZ + v_avePXZErr)
#variable		minPXZErr equal $(v_PXZ - v_avePXZErr)
#variable		maxPYZErr equal $(v_PYZ + v_avePYZErr)
#variable		minPYZErr equal $(v_PYZ - v_avePYZErr)
variable		avePXYErr delete
#variable		avePXZErr delete
#variable		avePYZErr delete


# -------------------- INITIALIZING THE CONFIGURATION --------------------------

clear
units 			metal
dimension 		3
boundary 		p p p
atom_style 		atomic
#atom_modify 

# --------------------- CREATE ATOMS-----------------------
read_data		${DATAFILE}

# ------------ DEFINE INTERATOMIC POTENTIAL ----------------

pair_style 		eam/alloy
pair_coeff 		* * CuNi.eam.alloy Ni Cu  
neighbor 		.05 bin
neigh_modify 		delay 10 check yes



thermo			100
thermo_style		custom step etotal vol temp press 
timestep		${TIMESTEP}



reset_timestep		0



# -------------------- SET UP COMPUTES AND FIX AVE/TIME -------------------- 
# AVERAGE AND STANDARD DEVIATION 
# Note: I have used abs on the standard deviation because sometimes when the volume is barely changing <v^2> - <v>^2 will be negative (maybe due to precesion errors?)
# TEMPERATURE 
variable 		TEMP equal temp
fix			aveTemp all ave/time 10 100 1000 v_TEMP mode scalar start 1000 ave one
variable		varAveTemp equal "f_aveTemp"
variable		tempSq equal "v_TEMP^2"
fix			aveTempSq all ave/time 10 100 1000 v_tempSq mode scalar start 1000 ave one
variable		tempSTD equal "sqrt(f_aveTempSq - f_aveTemp^2)"

# ENERGY
variable		ENERGY equal etotal
fix			aveEnergy all ave/time 10 100 1000 v_ENERGY mode scalar start 1000 ave one
variable 		varAveEnergy equal "f_aveEnergy"
variable		energySq equal "v_ENERGY^2"
fix			aveEnergySq all ave/time 10 100 1000 v_energySq mode scalar start 1000 ave one
variable		energySTD equal "sqrt(f_aveEnergySq - f_aveEnergy^2)"


# Pressure
variable		PRESS equal press
fix 			avePress all ave/time 10 100 1000 v_PRESS mode scalar start 1000 ave one
variable		varAvePress equal "f_avePress"
variable		pressSq equal "v_PRESS^2"
fix 			avePressSq all ave/time 10 100 1000 v_pressSq mode scalar start 1000 ave one
variable		pressSTD equal "sqrt(f_avePressSq - f_avePress^2)"

# Volume
variable		VOLUME equal vol
fix 			aveVolume all ave/time 10 100 1000 v_VOLUME mode scalar start 1000 ave one
variable 		varAveVolume equal "f_aveVolume"
variable		volumeSq equal "v_VOLUME^2"
fix 			aveVolumeSq all ave/time 10 100 1000 v_volumeSq mode scalar start 1000 ave one
variable 		volumeSTD equal "sqrt(abs(f_aveVolumeSq - f_aveVolume^2))"



# Pressure 



# Lengths


# Stresses

# -------------------- SET UP THERMO STYLES AND DUMPS -------------------- 

variable 		kT equal 100
variable 		kP equal 10000
variable		dampT equal "v_TIMESTEP * v_kT"
variable 		dampP equal "v_TIMESTEP * v_kP"





# During this step we bring the pressure to zero to get a value for the initial lengths

fix 			1 all nph iso 0 0 ${dampP} drag 2.0
fix			2 all langevin ${TEMPERATURE} ${TEMPERATURE} ${dampT} ${RANDOM} zero yes 

thermo			1000
thermo_style		custom step etotal v_varAveEnergy v_energySTD temp v_varAveTemp v_tempSTD vol v_varAveVolume v_volumeSTD press v_varAvePress v_pressSTD



log			log.conv
dump			1 all xyz 1000 dump.xyz 




# Variables to hold previous run's std values
variable		saveVolumeSTD equal 0.0
variable  		saveEnergySTD equal 0.0
variable  		saveTempSTD equal 0.0
variable		savePressSTD equal 0.0
# force convergence criteria to be met 10 times before going on
variable		i loop 10 
label loop


run 			10000


print "$(abs(v_saveEnergySTD - v_energySTD)) > ${energyErr} || $(abs(v_saveVolumeSTD - v_volumeSTD)) > ${volumeErr} || ${varAveTemp} > ${maxTempErr} || ${varAveTemp} < ${minTempErr} || ${varAvePress} > ${maxPressErr} || ${varAvePress} < ${minPressErr}" 
print "$i"
# Check to see if the simulation has met convergence criteria. 
#if "$(abs(v_saveEnergySTD - v_energySTD)) > ${energyErr} || $(abs(v_saveVolumeSTD - v_volumeSTD))  > ${volumeErr} || ${varAveTemp} > ${maxTempErr} || ${varAveTemp} < ${minTempErr} || ${varAvePress} > ${maxPressErr} || ${varAvePress} < ${minPressErr}"  &
# then "variable i loop 10" "variable saveEnergySTD equal $(v_energySTD)" "variable saveVolumeSTD equal $(v_volumeSTD)" "jump ${INFILE} loop"
if "i < 0" then "next i" "variable saveEnergySTD equal $(v_energySTD)" "variable saveVolumeSTD equal $(v_volumeSTD)" "jump ${INFILE} loop"




# after convergence to 0 pressure length we stress the system and wait for converegence again
unfix 			1
fix			1 all nph x ${PXX} ${PXX} ${dampP} y 0 0 ${dampP} z 0 0 ${dampP} xy ${PXY} ${PXY} ${dampP} xz 0 0 ${dampP} yz ${PYZ} ${PYZ}  ${dampP} 


# Removing averages and variable used only needed in initial convergence run
unfix			avePress
unfix			avePressSq
unfix			aveVolume
unfix			aveVolumeSq
variable		PRESS delete
variable		VOLUME delete
variable		varAvePress delete
variable		varAveVolume delete
variable		pressSq delete
variable		volumeSq delete
variable		pressSTD delete
variable		volumeSTD delete


# Adding varables to track stress and strain



variable 		pXX equal pxx
variable		pXXSq equal "v_pXX^2"
fix 			avePXX all ave/time 10 100 1000 v_pXX mode scalar start 1000 ave one
fix 			avePXXSq all ave/time 10 100 1000 v_pXXSq mode scalar start 1000 ave one
variable 		pXXSTD equal "sqrt(abs(f_avePXXSq - f_avePXX^2))"
variable 		varAvePXX equal "f_avePXX"

thermo 			1000
thermo_style		custom step etotal v_varAveEnergy v_energySTD temp v_varAveTemp v_tempSTD lx ly lz xy xz yz pxx v_varAvePXX v_pXXSTD pyy pzz pxy pxz pyz

log			log.stress



variable 		i index 10
label			loopStress

run 			1000




log			log.run
run 			${RUNTIME}
