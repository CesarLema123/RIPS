
# These variables must be included but can be written externally
# RANDOM (for fix langevin), RUNTIME (number of time steps to run data collection for) 
# TEMPERATURE, TIMESTEP (timestep in simulation units specified in init.mod
# DATAFILE, the name of the data file to be read



# Define MD parameters
variable nevery equal 10                  # sampling interval
variable nrepeat equal 10                 # number of samples
variable nfreq equal ${nevery}*${nrepeat} # length of one average
variable nthermo equal 5*${nfreq}           # interval for thermo output
variable nequil equal 10*${nthermo}       # length of equilibration run
variable kT equal 10			# lammps manual suggests 100 but example set it to 10
variable tdamp equal ${kT}*${TIMESTEP}  # time constant for thermostat



# Compute elastic constant tensor for a crystal at finite temperature
#
# WARNING: This script attempts to measure small differences in 
# statistical averages generated by finite temperature MD simulations. 
# This creates many more opportunities for errors to occur, compared 
# to the zero temperature version provided in examples/ELASTIC.
# Hence, it is always a good idea to start with the zero temperature
# calculation, before attempting to use this script.
#
# Written by Aidan Thompson (Sandia, athomps@sandia.gov)
#  Edits to this file were then made by the RIPS 2019 team.
#  
#
#  This script uses the following three included files.
#   
#   init.mod      (must be modified for different crystal structures)
# 	       	  Define units, MD parameters, deformation parameters,
#		  and initial configuration of the atoms and simulation cell.  
#
#   potential.mod    (must be modified for different pair styles)
# 		     Define pair style and other attributes 
#		     not stored in restart file
#
#
#   displace.mod    (displace.mod should not need to be modified)
# 		    Perform positive and negative box displacements 
# 		    in direction ${dir} and size ${up}. 
# 		    It uses the resultant changes 
#		    in stress to compute one
# 		    row of the elastic stiffness tensor
#		    
#		    Inputs variables:
#		    	   dir = the Voigt deformation component 
#		    		    (1,2,3,4,5,6)  
#		    Global constants:
#       	    	   up = the deformation magnitude (strain units)
#       		   cfac = conversion from LAMMPS pressure units to 
#               	   output units for elastic constants 
#
#
#  To run this on a different system, it should only be necessary to 
#  modify the files init.mod and potential.mod. In order to calculate
#  the elastic constants correctly, care must be taken to specify
#  the correct units in init.mod (units, cfac and cunits). It is also
#  important to verify that the MD sampling of stress components
#  is generating accurate statistical averages.
#  One indication of this is that the elastic constants are insensitive
#  to the choice of the variable ${up} in init.mod. Another is to
#  check for finite size effects. 
#


# Includes the variables which can be altered on each given run
# include variables.mod

# Specify the initial lattice configuration and where to read init atom data from
include init.mod

# Compute initial state, specify initial potential, values to be computed at each thermo step
include potential.mod

log log.convStart
# Run until system has converged
include convergence.mod

log log.runStart
include potential.mod
run ${RUNTIME}




variable pxx0 equal $(v_varAvePxx)
variable pyy0 equal $(v_varAvePyy)
variable pzz0 equal $(v_varAvePzz)
variable pxy0 equal $(v_varAvePxy)
variable pxz0 equal $(v_varAvePxz)
variable pyz0 equal $(v_varAvePyz)

variable dpxx0 equal $(v_pxxSTD)
variable dpyy0 equal $(v_pyySTD)
variable dpzz0 equal $(v_pzzSTD)
variable dpxy0 equal $(v_pxySTD)
variable dpxz0 equal $(v_pxzSTD)
variable dpyz0 equal $(v_pyzSTD)

variable tmp equal lx
variable lx0 equal ${tmp}
variable tmp equal ly
variable ly0 equal ${tmp}
variable tmp equal lz
variable lz0 equal ${tmp}

# These formulas define the derivatives w.r.t. strain components
# Constants uses $, variables use v_ 
variable d1 equal -(v_pxx1-${pxx0})/(v_delta/v_len0)*${cfac}
variable d2 equal -(v_pyy1-${pyy0})/(v_delta/v_len0)*${cfac}
variable d3 equal -(v_pzz1-${pzz0})/(v_delta/v_len0)*${cfac}
variable d4 equal -(v_pyz1-${pyz0})/(v_delta/v_len0)*${cfac}
variable d5 equal -(v_pxz1-${pxz0})/(v_delta/v_len0)*${cfac}
variable d6 equal -(v_pxy1-${pxy0})/(v_delta/v_len0)*${cfac}


variable dd1 equal v_d1*sqrt(((${dpxx0}/${pxx0})^2)+((v_dpxx1/v_pxx1)^2))
variable dd2 equal v_d2*sqrt((${dpyy0}/${pyy0})^2+(v_dpyy1/v_pyy1)^2)
variable dd3 equal v_d3*sqrt((${dpzz0}/${pzz0})^2+(v_dpzz1/v_pzz1)^2)
variable dd4 equal v_d4*sqrt((${dpxy0}/${pxy0})^2+(v_dpxy1/v_pxy1)^2)
variable dd5 equal v_d5*sqrt((${dpxz0}/${pxz0})^2+(v_dpxz1/v_pxz1)^2)
variable dd6 equal v_d6*sqrt((${dpyz0}/${pyz0})^2+(v_dpyz1/v_pyz1)^2)

# Write restart
write_restart restart.equil

# uxx Perturbation

variable dir equal 1
include displace.mod

# uyy Perturbation

variable dir equal 2
include displace.mod

# uzz Perturbation

variable dir equal 3
include displace.mod

# uyz Perturbation

variable dir equal 4
include displace.mod

# uxz Perturbation

variable dir equal 5
include displace.mod

# uxy Perturbation

variable dir equal 6
include displace.mod

# Output final values

variable C11all equal ${C11}
variable C22all equal ${C22}
variable C33all equal ${C33}

variable dC11all equal ${dC11}
variable dC22all equal ${dC22}
variable dC33all equal ${dC33}

variable C12all equal 0.5*(${C12}+${C21})
variable C13all equal 0.5*(${C13}+${C31})
variable C23all equal 0.5*(${C23}+${C32})

variable dC12all equal 0.5*(${dC12}+${dC21})/sqrt(2)
variable dC13all equal 0.5*(${dC13}+${dC31})/sqrt(2)
variable dC23all equal 0.5*(${dC23}+${dC32})/sqrt(2)

variable C44all equal ${C44}
variable C55all equal ${C55}
variable C66all equal ${C66}

variable dC44all equal ${dC44}
variable dC55all equal ${dC55}
variable dC66all equal ${dC66}

variable C14all equal 0.5*(${C14}+${C41})
variable C15all equal 0.5*(${C15}+${C51})
variable C16all equal 0.5*(${C16}+${C61})

variable dC14all equal 0.5*(${dC14}+${dC41})
variable dC15all equal 0.5*(${dC15}+${dC51})
variable dC16all equal 0.5*(${dC16}+${dC61})

variable C24all equal 0.5*(${C24}+${C42})
variable C25all equal 0.5*(${C25}+${C52})
variable C26all equal 0.5*(${C26}+${C62})

variable dC24all equal 0.5*(${dC24}+${dC42})/sqrt(2)
variable dC25all equal 0.5*(${dC25}+${dC52})/sqrt(2)
variable dC26all equal 0.5*(${dC26}+${dC62})/sqrt(2)

variable C34all equal 0.5*(${C34}+${C43})
variable C35all equal 0.5*(${C35}+${C53})
variable C36all equal 0.5*(${C36}+${C63})

variable dC34all equal 0.5*(${dC34}+${dC43})/sqrt(2)
variable dC35all equal 0.5*(${dC35}+${dC53})/sqrt(2)
variable dC36all equal 0.5*(${dC36}+${dC63})/sqrt(2)

variable C45all equal 0.5*(${C45}+${C54})
variable C46all equal 0.5*(${C46}+${C64})
variable C56all equal 0.5*(${C56}+${C65})

variable dC45all equal 0.5*(${dC45}+${dC54})/sqrt(2)
variable dC46all equal 0.5*(${dC46}+${dC64})/sqrt(2)
variable dC56all equal 0.5*(${dC56}+${dC65})/sqrt(2)

# Average moduli for cubic crystals

variable C11cubic equal (${C11all}+${C22all}+${C33all})/3.0
variable C12cubic equal (${C12all}+${C13all}+${C23all})/3.0
variable C44cubic equal (${C44all}+${C55all}+${C66all})/3.0

variable dC11cubic equal ${C11cubic}*sqrt((${dC11all}/${C11all})^2+(${dC22all}/${C22all})^2+(${dC33all}/${C33all})^2)
variable dC12cubic equal ${C12cubic}*sqrt((${dC12all}/${C12all})^2+(${dC13all}/${C13all})^2+(${dC23all}/${C23all})^2)
variable dC44cubic equal ${C44cubic}*sqrt((${dC44all}/${C44all})^2+(${dC55all}/${C55all})^2+(${dC66all}/${C66all})^2)

variable bulkmodulus equal (${C11cubic}+2*${C12cubic})/3.0
variable shearmodulus1 equal ${C44cubic}
variable shearmodulus2 equal (${C11cubic}-${C12cubic})/2.0
variable poissonratio equal 1.0/(1.0+${C11cubic}/${C12cubic})

variable dbulkmodulus equal sqrt((${dC11cubic}/3.0)^2+(${dC12cubic}*2.0/3.0)^2)
variable dshearmodulus1 equal ${dC44cubic}
variable dshearmodulus2 equal sqrt((${dC11cubic}/${C11cubic})^2+(${dC12cubic}/${C12cubic})^2)/2.0
variable dpoissonratio equal sqrt((${dC11cubic}*${C12cubic}/(${C12cubic}+${C11cubic})^2)^2+(${dC12cubic}*${C11cubic}/(${C12cubic}+${C11cubic})^2)^2)

# Additional Elastic Constants
variable youngmodulus equal 3.0*${bulkmodulus}*(1-2*${poissonratio})
variable lameparam equal (3.0*${bulkmodulus}*${poissonratio})/(1+${poissonratio})
variable pwavemodulus equal 3.0*${bulkmodulus}*(1-${poissonratio})/(1+${poissonratio})

variable dyoungmodulus equal sqrt((3.0*(1.0-2.0*${poissonratio})*${dbulkmodulus})^2+(6.0*${bulkmodulus}*${dpoissonratio})^2)
variable dlameparam equal sqrt((3.0*${dbulkmodulus}*${poissonratio}/(1.0+${poissonratio}))^2+(3.0*${bulkmodulus}*${dpoissonratio}/(1.0+${poissonratio})^2)^2) 
variable dpwavemodulus equal sqrt((3.0*${dbulkmodulus}*(1.0-${poissonratio})/(1.0+${poissonratio}))^2+(6.0*${bulkmodulus}*${poissonratio}*${dpoissonratio}/(1+${poissonratio})^2)^2)
 
log log.output  
# For Stillinger-Weber silicon, the analytical results
# are known to be (E. R. Cowley, 1988):
#               C11 = 151.4 GPa
#               C12 = 76.4 GPa
#               C44 = 56.4 GPa

print "========================================="
print "Components of the Elastic Constant Tensor"
print "========================================="

print "Elastic Constant C11all = ${C11all} ${cunits}"
print "Elastic Constant C22all = ${C22all} ${cunits}"
print "Elastic Constant C33all = ${C33all} ${cunits}"

print "Elastic Constant C12all = ${C12all} ${cunits}"
print "Elastic Constant C13all = ${C13all} ${cunits}"
print "Elastic Constant C23all = ${C23all} ${cunits}"

print "Elastic Constant C44all = ${C44all} ${cunits}"
print "Elastic Constant C55all = ${C55all} ${cunits}"
print "Elastic Constant C66all = ${C66all} ${cunits}"

print "Elastic Constant C14all = ${C14all} ${cunits}"
print "Elastic Constant C15all = ${C15all} ${cunits}"
print "Elastic Constant C16all = ${C16all} ${cunits}"

print "Elastic Constant C24all = ${C24all} ${cunits}"
print "Elastic Constant C25all = ${C25all} ${cunits}"
print "Elastic Constant C26all = ${C26all} ${cunits}"

print "Elastic Constant C34all = ${C34all} ${cunits}"
print "Elastic Constant C35all = ${C35all} ${cunits}"
print "Elastic Constant C36all = ${C36all} ${cunits}"

print "Elastic Constant C45all = ${C45all} ${cunits}"
print "Elastic Constant C46all = ${C46all} ${cunits}"
print "Elastic Constant C56all = ${C56all} ${cunits}"

print "========================================="
print "Average properties for a cubic crystal"
print "========================================="

print "Bulk Modulus = $(v_bulkmodulus) +/- $(v_dbulkmodulus) ${cunits}"
print "Shear Modulus 1 = $(v_shearmodulus1) +/- $(v_dshearmodulus1) ${cunits}"
print "Shear Modulus 2 = $(v_shearmodulus2) +/- $(v_dshearmodulus2) ${cunits}"
print "Poisson Ratio = $(v_poissonratio) +/- $(v_dpoissonratio)"
print "Youngs Modulus = $(v_youngmodulus) +/- $(v_dyoungmodulus) ${cunits}"
print "Lames First Parameter = $(v_lameparam) +/- $(v_dlameparam) ${cunits}"
print "P-Wave Modulus = $(v_pwavemodulus) +/- $(v_dpwavemodulus) ${cunits}"

